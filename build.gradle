buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, 'overvaults.mixin-refmap.json'
    config 'overvaults.mixin.json'
}

version = '1.5.1-1.18.2'
group = 'io.iridium.overvaults'
archivesBaseName = 'overvaults'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '1.18.1-2022.03.06-1.18.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=overvaults.mixin.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'overvaults'

            mods {
                overvaults {
                    source sourceSets.main
                }
            }
        }

        client2 {
            parent runs.client
            args '--username', 'Dev2'
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=overvaults.mixin.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'overvaults'

            mods {
                overvaults {
                    source sourceSets.main
                }
            }
        }


        gameTestServer {
            workingDirectory project.file('run')
            arg "-mixin.config=overvaults.mixin.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'overvaults'

            mods {
                overvaults {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg "-mixin.config=overvaults.mixin.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'overvaults', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                overvaults {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you
    maven { url = 'https://cursemaven.com' }
    maven { url = 'https://api.modrinth.com/maven' }
    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
     flatDir {
         dir 'libs'
     }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.18.2-40.2.9'
    runtimeOnly fg.deobf("curse.maven:lightspeedmod-821790:4594803")
    runtimeOnly fg.deobf("maven.modrinth:ksyxis:QFfBwOwT")
    implementation fg.deobf("curse.maven:vault-hunters-official-mod-458203:${vault_hunters_version}")

    // Dependencies for Runtime Debug
    implementation fg.deobf("curse.maven:quark-243121:${quark_version}")
    implementation fg.deobf("curse.maven:applied-energistics-2-223794:${applied_energistics_version}")
    implementation fg.deobf("curse.maven:refined-storage-243076:${refined_storage_version}")
    implementation fg.deobf("curse.maven:mekanism-268560:${mekanism_version}")
    implementation fg.deobf("curse.maven:simple-storage-network-268495:${simple_storage_version}")
    implementation fg.deobf("curse.maven:architects-palette-433862:${architects_palette_version}")
    implementation fg.deobf("curse.maven:curios-309927:4418032")
    implementation fg.deobf("curse.maven:autoreglib-250363:${autoreglib_version}")
    implementation fg.deobf("curse.maven:sophisticated-core-618298:${sophisticated_core_version}")
    implementation fg.deobf("curse.maven:sophisticated-backpacks-422301:${sophisticated_backpacks_version}")
    implementation fg.deobf("curse.maven:sophisticated-backpacks-vault-hunters-edition-696425:${sophisticated_backpacks_vh_version}")
    implementation fg.deobf("curse.maven:configured-457570:${configured_version}")
    implementation fg.deobf("curse.maven:storage-drawers-223852:${storage_drawers_version}")
    implementation fg.deobf("curse.maven:geckolib-388172:${geckolib_version}")
    implementation fg.deobf("curse.maven:citadel-331936:${citadel_version}")
    implementation fg.deobf("curse.maven:jei-238222:${jei_version}")
    implementation fg.deobf("curse.maven:supplementaries-412082:4548315")
    implementation fg.deobf("curse.maven:selene-499980:5660287")
    implementation fg.deobf("curse.maven:shutup-experimental-settings-407174:3544525")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "OverVaults",
                "Specification-Vendor"    : "Iridium IO",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Iridium IO",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

task copyMostRecentFile {
    doLast {
        def sourceDir = file('build/libs')
        def destDir = file(System.getenv('APPDATA') + '\\ATLauncher\\instances\\VaultHunters3rdEdition\\mods')

        // Find the most recent file
        def mostRecentFile = sourceDir.listFiles().max { it.lastModified() }

        if (mostRecentFile) {
            copy {
                from mostRecentFile
                into destDir
            }
            println "Copied ${mostRecentFile.name} to ${destDir}"
        } else {
            println "No files found in ${sourceDir}"
        }
    }
}

// Ensure the task runs after the build
build.finalizedBy(copyMostRecentFile)